service: aion

custom:
  calendarTableName: ${self:service}-${self:provider.stage}-calendar
  filterTableName: ${self:service}-${self:provider.stage}-filter
  dynamoEndpoint: https://dynamodb.us-west-2.amazonaws.com

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, "dev"}
  region: us-west-2
  memorySize: 512
  timeout: 20
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource: "*"
  environment:
    DYNAMODB_ENDPOINT: ${self:custom.dynamoEndpoint}
    DYNAMODB_REGION: ${self:provider.region}
    CALENDAR_TABLE_NAME: ${self:custom.calendarTableName}
    FILTER_TABLE_NAME: ${self:custom.filterTableName}
    GEOCODER_API_KEY: ${env:GEOCODER_API_KEY}

package:
  artifact: /tmp/workspace/build/distributions/${self:service}.zip

functions:
  handler:
    handler: com.merricklabs.aion.handlers.StreamLambdaHandler
    events:
      - http:
          path: /{proxy+}
          method: any
          cors: true

resources:
  Resources:
    CalendarTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.calendarTableName}
    FilterTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.filterTableName}